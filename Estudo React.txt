Só fui bem sucedido para rodar npx create-react-app . usando o node 14.21.3
Usando node com versões mais novas ele sempre quebrava...

npm start para iniciar a aplicação

O react usa o JSX, que é uma combinação de HTML e Javascript

O react usa o hot reload, ou seja, alterações salvas são automaticamente atualizadas no localhost.

O arquivo App.js contém o conteúdo da página inicial do projeto criado

No App.js ele deletou o conteúdo da tag header, mantendo a tag

Em seguida ele apagou o conteúdo do arquivo App.css
Ele vai utilizar uma biblioteca que permite estilizar os componentes dentro do próprio arquivo index.js

Basicamente cada componente do react é uma função que exporta html.
detalhes importantes: sempre o que deve ser exportado é uma tag apenas, no caso abaixo, uma div.
A tag exportada pode conter inúmeros componentes dentro dela.
Mas sempre a exportação é de um componente apenas.
Existe também o componente react criado com classe mas, pelo meus estudos, o componente de function,
além de mais usado, é mais moderno e mais prático.
Os import acontecem no início do arquivo.

import logo from './logo.svg';
import './App.css';
function App() {
  return (
    <div className="App">
      <header className="App-header">
      </header>
    </div>
  );
}

export default App;

criou uma pasta imagens dentro de src
moveu as imagens baixadas para dentro da pasta

o react usa a nomenclatura className para diferenciar do class do HTML...
mas o objetivo é o mesmo... estilizar com css

Ele importou a logo do alura books e inseriu uma div e uma imagem dentro do header
import logo from './imagens/logo.svg';

<div className='logo'>
   <img src={logo} />
</div>

Qualquer tag HTML que não tenha filhos pode ser fechada com />, como a img acima

Na importação logo passou a ser uma variável que foi usada entre chaves {logo} na propriedade src

Adicionou um texto estilizado com strong e o alt da imagem

<div className='logo'>
   <img src={logo} alt='Imagem da logo'/>
   <p><strong>Alura</strong>Books</p>
</div>
 
ele criou a classe logo no App.css para estilizar

.logo {
    display: flex;
}

Vamos agora criar um componente Logo que poderá ser usado em outros locais

criamos uma pasta componentes em src e dentro dela criamos a pasta Logo (com L Maiúsculo mesmo)
dentro da pasta Logo ele cria um arquivo index.js e um estilo.css
como todo componente é um função, dentro de index.js a gente vai criar uma função e exportá-la
O conteúdo da função é o mesmo HTML que já criamos dentro de App.js. Basta mudar de lugar.
O arquivo index.js ficou assim

import logo from '../../imagens/logo.svg';

function Logo() {
    return (
        <div className='logo'>
            <img src={logo} alt='Imagem da logo' />
            <p><strong>Alura</strong>Books</p>
        </div>
    )
}

export default Logo

o nome da função é o mesmo nome da pasta (por isso usamos o L maiúsculo em ambos os casos)

O arquivo App.js ficou mais simples

import './App.css';
import Logo from './componentes/Logo';

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <Logo />
      </header>
    </div>
  );
}

export default App;

O componente continou estilizado porque a classe logo continua no App.css
Mas é melhor colocar no estilo.css da pasta Logo e importar no index.js

Ele continuou estilizando o logo dentro do estilo.css

vamos continuar criando o header

Para isso vamos popular o header e aprender a usar loops no react
Criou uma ul com 3 li dentro e um p em cada li

<header className="App-header">
        <Logo />
        <ul className='opcoes'>
          <li className='opcao'><p>Categorias</p></li>
          <li className='opcao'><p>Favoritos</p></li>
          <li className='opcao'><p>Estante</p></li>
        </ul>
      </header>

Ele estilizou para ficar mais arrumado
Mas o código está muito repetido
Sendo um arquivo js, podemos resolver isso com js
ele criou uma lista com os textos (única parte do li que muda)

const textoOpcoes = ['Categoria', 'Favorito', 'Estante'];

Substituiu cada linha de li por uma função usando o map

<ul className='opcoes'>
          { textoOpcoes.map( (texto) => {
            return <li className='opcao'><p>{ texto }</p></li>
          }) }
        </ul>

no meu código foi pedido para usar o return na função callback do map
No código do prof não pediu. provavelmente, versões...


Vamos aproveitar agora e praticar o map para colocar os ícones do header

import perfil from './imagens/perfil.svg';
import sacola from './imagens/sacola.svg';

const icones = [perfil, sacola];

<ul className='icones'>
          { icones.map( (icone) => {
            return <li className='icone'><img src = { icone } alt='icone'/></li>
          }) }
        </ul>


Tudo funcionando mas vamos agora componentizar para limpar o código

Criamos a pasta OpcoesHeader com o index.js e o estilo.css

Fiz sozinho a componentização e deu bom
Basicamente foi trocar a ul de arquivo, assim como as classes ligadas a ela
Criando a função OpcoesHeader e exportando...
Não esqueça de importar o css no novo arquivo .js

Vou fazer agora o componente dos ícones, na pasta IconesHeader

Fiz sozinho e tudo funcionou beleza...
Quando componentizar, atenção às imagens ou recursos que estejam carregados
Como criamos pasta nova para o componente, o path desses recursos normalmente precisa ser corrigido

Vamos agora criar um componente Header que vai conter Logo, OpcoesHeader e IconesHeader

Apenas atente que será preciso criar uma div pois a função deve exportar apenas um único componente
Mas na verdade não precisou pois ele levou junto a tag header e isso resolve a questão

Tudo andando de boas

Agora ele vai instalar uma biblioteca que permite eliminar os arquivos css (styled components)

npm install styled-components

como eu fiz um clone em outra máquina, eu fui na pasta do projeto e rodei npm install
todas as dependências do projeto foram adicionadas e o projeto rodou beleza

maravilha

voltando ao styled-components

Ele vai nos ajudar na conteinerização

Um conteiner tem a função única de encapsular outros ítens. Por exemplo, Header é um conteiner.

<header className="App-header">
    <Logo />
    <OpcoesHeader />
    <IconesHeader />
</header>

No App.js também existe um conteiner...
<div className="App">
  <Header />
</div>

A única função dessa div é encapsular o Header...

Com o styled-components o css vai ficar dentro do arquivo ,js de cada conteiner,
permitindo, assim, excluir todos os .css do projeto.

No App.js ele importou o styled-components
import styled from 'styled-components'

Vamos criar uma const que vai ser esse componente estilizado usando a crase
e dentro da crase a gente vai colocar o css que se relaciona com esse conteiner
perceba que a classe .App deixou de existir
por enquanto, o a estilização do li vai ficar aí
Usamos o .div depois do styled porque, nesse caso, o componente é uma div

const AppContainer = styled.div`

  width: 100vw;
  height: 100vh;
  background-image: linear-gradient(90deg, #002F52 35%, #326589 165%);

  li {
      list-style: none;
  }
`

Não precisa alterar o export mas o que antes estava assim, em App.js,

function App() {
  return (
    <div className="App">
      <Header />
    </div>
  );
}

passou a ficar assim...

function App() {
  return (
    <AppContainer>
      <Header />
    </AppContainer>
  );
}

export default App;

Muito legal!!!

Podemos, então, excluir o import do css

funcionouE eu já fiz com o Header e deu certo
Agora ele se chama HeaderComponent ao invés de usar a tag header
Mas é claro que o conteiner teve styled.header`` na sua criação

Tudo criado pelo styled components é um componente, e o padrão do react é,
tudo que for componente, começa com letra maiúscula...
AppContainer, HeaderContainer, Header, App....

Massa demais...

Vamos aprender agora a usar o styled components quando não se trata de conteiner...

Segundo o professor, em projetos muito complexos de react, às vezes o css não é perfeitamente seguido
por causa de nomes de classes ou coisas do tipo que podem 'confundir' o react em casos de loop, por exemplo.
Segundo ele, o styled-components traz segurança neste sentido ao projeto,
além de deixá-lo mais enxuto.

Vamos trabalhar agona no componente IconesHeader, também com o objetivo de eliminar o css.
Mas esse caso é um pouco diferente pois temos duas classes dentro do componente.

.icones {
    display: flex;
    align-items: center;
}

.icone {
    margin-right: 40px;
    width: 25px;
}

O componente antes estava assim....

Foi criado um styled para a li recebendo o nome de Icone

const Icone = styled.li`
    margin-right: 40px;
    width: 25px;
`

e também um outro chamado Icones para a ul

const Icones = styled.ul`
    display: flex;
    align-items: center;
`

Vou fazer a mesma coisa com Logo e OpcoesHeader

Deu tudo certo por aqui....
Muito legal, muito útil também...

Vamos lidar agora com o Global Style, ou seja, estilização para todo o projeto

Existe um arquivo chamado index.css

O index.js é o que serve para o react trabalhar por baixo dos panos

então, o nosso styled component que vai trabalhar como global vai ser nesse arquivo

mas a forma é um pouco diferente

no index.js precisamos fazer a importação da seguinte maneira:
import { createGlobalStyle } from 'styled-components';

depois criamos o GlobalStyle e copiamos o conteúdo do index.css e também trazemos
aquele li que tinha ficado no App.js

const GlobalStyle = createGlobalStyle`
  body {
    margin: 0;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
      sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  code {
    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
      monospace;
  }

  li {
    list-style: none;
  }
`
Podemos agora usar o componente GlobalStyle antes do componente App
dentro do próprio index.js e retirar o import do index.css
Podemos também apagar o index.css

Massa demais

<React.StrictMode>
    <GlobalStyle />
    <App />
</React.StrictMode>


Agora vamos conhecer um conceito muito importante: ESTADO

No App.js ele criou já a tag Pesquisa
<AppContainer>
  <Header />
  <Pesquisa />
</AppContainer>

Ele começou pelo caminho inverso...

Depois ele criou o componente e fez o fluxo padrão, criou a função com o export default

colocou um h2, h3 e um input....

Colocou o import de Pesquisa no App.js e testou.... não estava estilizado, mas já apareceu...

Pensando na reutilização futura do input, ele resolveu criar um componente só para isso...
Entretanto, como o styled component é um componente e o input não tem lógica alguma,
ele fez apenas um styled component para ser o Input
e o código ficou bastante simples...
Acredito que quando for um input, pode ser sempre feito assim....
import styled from 'styled-components';

const Input = styled.input`
    order: 1px solid #FFF;
    background: transparent;
    border: 1px solid #FFF;
    padding: 20px 140px;
    border-radius: 50px;
    width: 200px;
    color: #FFF;
    font-size: 16px;
    margin-bottom: 10px;

    &::placeholder {
        color: #FFF;
        font-size: 16px;
    }
`
export default Input

O placeholder fica na própria chamada ao Input, que está em Pesquisa

<section>
    <h2>Já sabe por onde começar?</h2>
    <h3>Encontre seu livro em nossa estante.</h3>
    <Input placeholder="Escreva sua próxima leitura"/>
</section>

Para poder estilizar o h2 e o h3, ele trocou a section por PesquisaContainer,
h2 por Titulo e h3 por Subtitulo

import Input from '../Input'
import styled from 'styled-components'

const PesquisaContainer = styled.section`
    background-image: linear-gradient(90deg, #002F52 35%, #326589 165%);
    color: #FFF;
    text-align: center;
    padding: 85px 0;
    height: 470px;
    width: 100%;
`

const Titulo = styled.h2`
    color: #FFF;
    font-size: 36px;
    text-align: center;
    width: 100%;
`

const Subtitulo = styled.h3`
    font-size: 16px;
    font-weight: 500;
    margin-bottom: 40px;
`
function Pesquisa() {
    return(
        <PesquisaContainer>
            <Titulo>Já sabe por onde começar?</Titulo>
            <Subtitulo>Encontre seu livro em nossa estante.</Subtitulo>
            <Input placeholder="Escreva sua próxima leitura"/>
        </PesquisaContainer>
    )
}

export default Pesquisa

Vamos agora entender como fazer para que o conteúdo do input seja capturado pelo react

no Input usaremos o onBlur, que é o evento de sair do campo...
o onBlur sempre tem um evento e para capturar o valor do input usaremos evento.target.value
como no exemplo abaixo
onBlur={evento => console.log(evento.target.value)}

o estado está relacionado às propriedades do componente que podem ter seus valores alterados

começamos importando no componente Pesquisa

import { useState } from 'react'

declaramos o estado no início da função (antes do return) da seguinte maneira

const [textoDigitado, setTextoDigitado] = useState('')

primeiro vem o nome do estado e depois o nome da função que vai servir para alterar o valor do estado
dentro do useState vem o valor inicial do estado... em strings, normalmente vai ser ''
o setTextoDigitado fica a cargo do react.... a gente não faz nada além de informar nessa declaração

mas a gente vai usar setTextoDigitado no onBlur...

<Input 
  placeholder="Escreva sua próxima leitura"
  onBlur={evento => setTextoDigitado(evento.target.value)}
/>

e apenas para monitorar nesse momento, usaremos uma tag p para acompanhar a mudança de estado

<PesquisaContainer>
  <Titulo>Já sabe por onde começar?</Titulo>
  <Subtitulo>Encontre seu livro em nossa estante.</Subtitulo>
  <Input 
      placeholder="Escreva sua próxima leitura"
      onBlur={evento => setTextoDigitado(evento.target.value)}
  />
  <p>{ textoDigitado }</p>
</PesquisaContainer>

vamos agora criar um pequeno mock de dados para termos um retorno na pesquisa

criamos o arquivo dadosPesquisa.js na pasta Pesquisa que ficou assim

import livro from '../../imagens/livro.png'

export const livros = [
    {nome: 'Liderança em Design', id: 1, src: livro},
    {nome: 'Javascript Assertivo', id: 2, src: livro},
    {nome: 'Cangaceiro em Javascript', id: 3, src: livro},
    {nome: 'Mergulhando em Java', id: 4, src: livro}
]

Perceba que o export dele é diferente pois dessa forma a gente pode
exportar outros dados também como, por exemplo, 
export const autores = [ ........ ]

o import dele em Pesquisa também será diferente, será entre chaves...

import { livros } from './dadosPesquisa'

vamos alterar agora o nosso estado, ele vai se chamar livrosPesquisados

const [livrosPesquisados, setLivrosPesquisados] = useState([])

livrosPesquisados será uma lista de livros retornado então o seu estado inicial é [], uma lista vazia

A nossa function Pesquisa mudou bastante...
function Pesquisa() {
    const [livrosPesquisados, setLivrosPesquisados] = useState([])
    console.log(livrosPesquisados);
                    
    return(
        <PesquisaContainer>
            <Titulo>Já sabe por onde começar?</Titulo>
            <Subtitulo>Encontre seu livro em nossa estante.</Subtitulo>
            <Input 
                placeholder="Escreva sua próxima leitura"
                onBlur={evento => {
                    const textoDigitado = evento.target.value
                    const resultadoPesquisa = livros.filter(livro => livro.nome.includes(textoDigitado))
                    setLivrosPesquisados(resultadoPesquisa)
                }}
            />
        </PesquisaContainer>
    )
}

export default Pesquisa

ele usou um console.log abaixo do useState para monitorar o valor de resultadoPesquisa
que é alterado no onBlur...

no onBlur agora ele recebe o textoDigitado,
faz um filtro em livros usando o textoDigitado...
nesse filtro, o retorno será uma lista que contém todos os livros que possuem o textoDigitado no atributo nome
depois usa o setLivrosPesquisados para alterar o estado....
bem tranquilo....
mas o console.log quando eu testei dentro do onBlur não trouxe a resposta atualizada. veio sempre a primeira.

faremos um map para exibir os livros na tela e podemos apagar o console.log

function Pesquisa() {
    const [livrosPesquisados, setLivrosPesquisados] = useState([])
                    
    return(
        <PesquisaContainer>
            <Titulo>Já sabe por onde começar?</Titulo>
            <Subtitulo>Encontre seu livro em nossa estante.</Subtitulo>
            <Input 
                placeholder="Escreva sua próxima leitura"
                onBlur={evento => {
                    const textoDigitado = evento.target.value
                    const resultadoPesquisa = livros.filter(livro => livro.nome.includes(textoDigitado))
                    setLivrosPesquisados(resultadoPesquisa)
                }}
            />
            { livrosPesquisados.map( livro => (
                <div>
                    <p>{livro.nome}</p>
                    <img src={livro.src} alt='capa'/>
                </div>
            ))}
        </PesquisaContainer>
    )
}

export default Pesquisa

este map vai retornar um html e por isso a função callback usa parênteses
ele cria uma div para ser o elemento pai

Agora vamos conhecer as props e criar uma nova seção para o nosso site

Vamos criar no App.js o componente UltimosLancamentos

Criou uma pequena seção embaixo da principal e com as props conseguimos passar algumas
configurações para o componente.

<AppContainer>
  <Header />
  <Pesquisa />
  <UltimosLancamentos />
</AppContainer>

Ele agora criou um arquivo para ter os dados dos últimos lançamentos.
dadosUltimosLancamentos.js tem a mesma estrutura que dadosPesquisa.js
importa ele no index do UltimosLancamentos

criou os syled components e ficou assim...

function UltimosLancamentos() {
    return (
        <UltimosLancamentosContainer>
            <Titulo>Últimos Lançamentos</Titulo>
            <NovosLivrosContainer>
                {livros.map(livro => (
                    <img src={livro.src} />
                ))}
            </NovosLivrosContainer>
        </UltimosLancamentosContainer>
    )
}

export default UltimosLancamentos

Vamos usar as props para deixar os componentes mais genéricos

Inicialmente vamos considerar a cor da fonte do título
No styled.h2 a gente ficou assim inicialmente...

const Titulo = styled.h2`
    width: 100%;
    padding: 30px 0;
    background-color: #FFF;
    color: #EB9B00;
    font-size: 36px;
    text-align: center;
    margin: 0;
`

Para poder lidar com as props mais tranquilamente, vamos criar um componente Titulo

Deu tudo certo
Ele exportou sem o default, colocando direto...

export const Titulo = styled.h2`
    width: 100%;
    padding: 30px 0;
    background-color: #FFF;
    color: #EB9B00;
    font-size: 36px;
    text-align: center;
    margin: 0;
`

Dessa forma, ele importou usando em últimos lançamentos usando as chaves
import { Titulo } from....

Eu usei o export default e importei normalmente, sem as chaves...

Vamos às props...
Props são atributos personalizáveis que criamos para algum componente...
Da mesma forma que src é um atributo padrão para a tag img, podemos criar atributos (props)
Vamos criar uma prop cor para passar a cor do título
O primeiro passo é simples... passar o valor na chamada de Titulo...
<Titulo cor="#000">Últimos Lançamentos</Titulo>
O segundo passo é informar no componente e também é simples

Estava assim...
const Titulo = styled.h2`
    width: 100%;
    padding: 30px 0;
    background-color: #FFF;
    color: #EB9B00;
    font-size: 36px;
    text-align: center;
    margin: 0;
`
export default Titulo

e para usar props...

const Titulo = styled.h2`
    width: 100%;
    padding: 30px 0;
    background-color: #FFF;
    color: ${ props => props.cor };
    font-size: 36px;
    text-align: center;
    margin: 0;
`
export default Titulo

Muito simples e muito eficiente...

E ainda podemos definir um valor padrão, caso não seja passado o atributo cor na chamada...

const Titulo = styled.h2`
    width: 100%;
    padding: 30px 0;
    background-color: #FFF;
    color: ${ props => props.cor || '#EB9B00' };
    font-size: 36px;
    text-align: center;
    margin: 0;
`
export default Titulo

Muuuuito legal.....

vamos criar os props tamanhoFonte e alinhamento

<Titulo cor="#000" tamanhoFonte="20px" alinhamento="left">Últimos Lançamentos</Titulo>

const Titulo = styled.h2`
    width: 100%;
    padding: 30px 0;
    background-color: #FFF;
    color: ${ props => props.cor || '#EB9B00' };
    font-size: ${ props => props.tamanhoFonte || '36px' };
    text-align: ${ props => props.alinhamento || 'center' };
    margin: 0;
`
export default Titulo

Sensacional!!!


Invertemos para que a cor default seja preto e a passada seja o laranja...

<Titulo 
  cor="#EB9B00" 
  tamanhoFonte="36px" 
  alinhamento="center"
  >Últimos Lançamentos</Titulo>

const Titulo = styled.h2`
    width: 100%;
    padding: 30px 0;
    background-color: #FFF;
    color: ${ props => props.cor || '#000' };
    font-size: ${ props => props.tamanhoFonte || '36px' };
    text-align: ${ props => props.alinhamento || 'center' };
    margin: 0;
`
export default Titulo

